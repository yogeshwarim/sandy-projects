templates/index.tmpl

<html>
  <head>
    <!-- CSS only -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor" crossorigin="anonymous">
    <!-- JavaScript Bundle with Popper -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/js/bootstrap.bundle.min.js" integrity="sha384-pprn3073KE6tl6bjs2QrFaJGz5/SUsLqktiwsUTF55Jfv3qYSDhgCecCxMW52nD2" crossorigin="anonymous"></script>
  </head>
  <body>
    <div class="row">
      <div class="col-8">
        Instagram Clone
      </div>
      <div class="col-4">
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">Add</button>
      </div>
    </div>

    <div class="row g-2">
      {{range .Posts}}
        <div class="col-6">
          <img src="{{.Photo}}" class="w-100">
        </div>
      {{end}}
    </div>

    <!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Add Post</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="target">
          <div class="mb-3">
            <label class="form-label">Name</label>
            <input id="name" type="text" class="form-control" name="name">
          </div>
          <div class="mb-3">
            <label class="form-label">Media</label>
            <input id="photo" type="text" class="form-control" name="photo">
          </div>
          <button type="submit" class="btn btn-primary">Submit</button>
		    </form>
      </div>
    </div>
  </div>
</div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
    <script>

      function getBase64(file) {
        return new Promise((resolve, reject) => {
          const reader = new FileReader();
          reader.readAsDataURL(file);
          reader.onload = () => resolve(reader.result);
          reader.onerror = error => reject(error);
        });
      }
      
      $("#target").submit(async function(event) {
        event.preventDefault();
        const formData = new FormData();
        formData.append('name', $("#name").val());
        formData.append('photo', $("#photo").val());
        $.ajax({
          type: "POST",
          url: "/add",
          data: formData,
          processData: false,
          contentType: false
        }).done(function() {
          location.reload();
        })
      });
    </script>
  </body>
</html>
===================================================================
main.go
package main

import (
  "fmt"
  // "net/http"
)

import "github.com/gin-gonic/gin"

var store = NewPostStore("posts.json")

type Post struct {
  Name string
  Photo string
}

var Posts = []Post {}

func main() {
	router := gin.Default()
  router.LoadHTMLGlob("templates/*")
  
  router.GET("/", func(c *gin.Context) {
    ps := store.Get()
    fmt.Printf("%v", ps)
    p := make([]Post, 0, len(ps))
    for key, value := range ps {
      post := Post{key, value}
      p = append(p, post)
    }
    fmt.Printf("%v", p)
		c.HTML(200, "index.tmpl", gin.H{
      "Posts": p,
    })
	})

  router.POST("/add", func(c *gin.Context) {
    // var post Post
    // c.ShouldBind(&post)
    name := c.PostForm("name")
    photo := c.PostForm("photo")
    store.Put(name, photo)
    // Posts = append(Posts, post)
    // fmt.Printf("%v", Posts)
    c.JSON(200, gin.H{
      "status": 1,
    })
    // c.Redirect(http.StatusFound, "/")
	})
	router.Run(":8080")
}
======================================================
posts.gob

========================================
posts.json

=============================================================
store.go
package main

import (
  "encoding/json"
	"io"
	"log"
	"os"
	"sync"
  "fmt"
)

type URLStore struct {
	urls     map[string]string
	mu       sync.RWMutex
	file     *os.File
}

type record struct {
  Name string
  Photo string
}

func NewPostStore(filename string) *URLStore {
	s := &URLStore{urls: make(map[string]string)}
	f, err := os.OpenFile(filename, os.O_RDWR|os.O_CREATE|os.O_APPEND, 0644)
	if err != nil {
		log.Fatal("Error opening URLStore:", err)
	}
	s.file = f
	if err := s.load(); err != nil {
		log.Println("Error loading URLStore:", err)
	}
	return s
}

func (s *URLStore) load() error {
	if _, err := s.file.Seek(0, 0); err != nil {
		return err
	}
	d := json.NewDecoder(s.file) 
	var err error
	for err == nil {
		var r record
		if err = d.Decode(&r); err == nil {
			s.Set(r.Name, r.Photo)
		}
	}
	if err == io.EOF {
		return nil
	}
	return err
}

func (s *URLStore) save(key, url string) error {
	e := json.NewEncoder(s.file)
	return e.Encode(record{key, url})
}

func (s *URLStore) Set(key, url string) bool {
	s.mu.Lock()
	defer s.mu.Unlock()
	s.urls[key] = url
  fmt.Printf("%v", s.urls)
	return true
}

func (s *URLStore) Get() map[string]string {
	s.mu.RLock()
	defer s.mu.RUnlock()
	return s.urls
}

func (s *URLStore) Put(key string, url string) bool {
  fmt.Printf("%v, %v", key, url)
	s.Set(key, url)
  s.save(key, url)
  return true
}